// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shorturl.proto

#include "shorturl.pb.h"
#include "shorturl.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace shorturl_voice {

static const char* ShortUrl_method_names[] = {
  "/shorturl_voice.ShortUrl/GetShortUrl",
  "/shorturl_voice.ShortUrl/GetOriginalUrl",
};

std::unique_ptr< ShortUrl::Stub> ShortUrl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ShortUrl::Stub> stub(new ShortUrl::Stub(channel, options));
  return stub;
}

ShortUrl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetShortUrl_(ShortUrl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOriginalUrl_(ShortUrl_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ShortUrl::Stub::GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::shorturl_voice::Url* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shorturl_voice::Url, ::shorturl_voice::Url, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetShortUrl_, context, request, response);
}

void ShortUrl::Stub::async::GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shorturl_voice::Url, ::shorturl_voice::Url, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShortUrl_, context, request, response, std::move(f));
}

void ShortUrl::Stub::async::GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShortUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>* ShortUrl::Stub::PrepareAsyncGetShortUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shorturl_voice::Url, ::shorturl_voice::Url, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetShortUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>* ShortUrl::Stub::AsyncGetShortUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetShortUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ShortUrl::Stub::GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::shorturl_voice::Url* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shorturl_voice::ShortKey, ::shorturl_voice::Url, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOriginalUrl_, context, request, response);
}

void ShortUrl::Stub::async::GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shorturl_voice::ShortKey, ::shorturl_voice::Url, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOriginalUrl_, context, request, response, std::move(f));
}

void ShortUrl::Stub::async::GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOriginalUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>* ShortUrl::Stub::PrepareAsyncGetOriginalUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shorturl_voice::Url, ::shorturl_voice::ShortKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOriginalUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>* ShortUrl::Stub::AsyncGetOriginalUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOriginalUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

ShortUrl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShortUrl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShortUrl::Service, ::shorturl_voice::Url, ::shorturl_voice::Url, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShortUrl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shorturl_voice::Url* req,
             ::shorturl_voice::Url* resp) {
               return service->GetShortUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShortUrl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShortUrl::Service, ::shorturl_voice::ShortKey, ::shorturl_voice::Url, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShortUrl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shorturl_voice::ShortKey* req,
             ::shorturl_voice::Url* resp) {
               return service->GetOriginalUrl(ctx, req, resp);
             }, this)));
}

ShortUrl::Service::~Service() {
}

::grpc::Status ShortUrl::Service::GetShortUrl(::grpc::ServerContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShortUrl::Service::GetOriginalUrl(::grpc::ServerContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace shorturl_voice

