// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shorturl.proto
#ifndef GRPC_shorturl_2eproto__INCLUDED
#define GRPC_shorturl_2eproto__INCLUDED

#include "shorturl.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace shorturl_voice {

// 服务定义
class ShortUrl final {
 public:
  static constexpr char const* service_full_name() {
    return "shorturl_voice.ShortUrl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::shorturl_voice::Url* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>> AsyncGetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>>(AsyncGetShortUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>> PrepareAsyncGetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>>(PrepareAsyncGetShortUrlRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::shorturl_voice::Url* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>> AsyncGetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>>(AsyncGetOriginalUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>> PrepareAsyncGetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>>(PrepareAsyncGetOriginalUrlRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>* AsyncGetShortUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>* PrepareAsyncGetShortUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>* AsyncGetOriginalUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shorturl_voice::Url>* PrepareAsyncGetOriginalUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::shorturl_voice::Url* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>> AsyncGetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>>(AsyncGetShortUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>> PrepareAsyncGetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>>(PrepareAsyncGetShortUrlRaw(context, request, cq));
    }
    ::grpc::Status GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::shorturl_voice::Url* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>> AsyncGetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>>(AsyncGetOriginalUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>> PrepareAsyncGetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>>(PrepareAsyncGetOriginalUrlRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response, std::function<void(::grpc::Status)>) override;
      void GetShortUrl(::grpc::ClientContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response, std::function<void(::grpc::Status)>) override;
      void GetOriginalUrl(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>* AsyncGetShortUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>* PrepareAsyncGetShortUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::Url& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>* AsyncGetOriginalUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shorturl_voice::Url>* PrepareAsyncGetOriginalUrlRaw(::grpc::ClientContext* context, const ::shorturl_voice::ShortKey& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetShortUrl_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOriginalUrl_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetShortUrl(::grpc::ServerContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response);
    virtual ::grpc::Status GetOriginalUrl(::grpc::ServerContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetShortUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetShortUrl() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetShortUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShortUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::Url* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShortUrl(::grpc::ServerContext* context, ::shorturl_voice::Url* request, ::grpc::ServerAsyncResponseWriter< ::shorturl_voice::Url>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOriginalUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOriginalUrl() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOriginalUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOriginalUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::ShortKey* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOriginalUrl(::grpc::ServerContext* context, ::shorturl_voice::ShortKey* request, ::grpc::ServerAsyncResponseWriter< ::shorturl_voice::Url>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetShortUrl<WithAsyncMethod_GetOriginalUrl<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetShortUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetShortUrl() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::shorturl_voice::Url, ::shorturl_voice::Url>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shorturl_voice::Url* request, ::shorturl_voice::Url* response) { return this->GetShortUrl(context, request, response); }));}
    void SetMessageAllocatorFor_GetShortUrl(
        ::grpc::MessageAllocator< ::shorturl_voice::Url, ::shorturl_voice::Url>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shorturl_voice::Url, ::shorturl_voice::Url>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetShortUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShortUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::Url* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetShortUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::shorturl_voice::Url* /*request*/, ::shorturl_voice::Url* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOriginalUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOriginalUrl() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::shorturl_voice::ShortKey, ::shorturl_voice::Url>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shorturl_voice::ShortKey* request, ::shorturl_voice::Url* response) { return this->GetOriginalUrl(context, request, response); }));}
    void SetMessageAllocatorFor_GetOriginalUrl(
        ::grpc::MessageAllocator< ::shorturl_voice::ShortKey, ::shorturl_voice::Url>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shorturl_voice::ShortKey, ::shorturl_voice::Url>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOriginalUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOriginalUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::ShortKey* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOriginalUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::shorturl_voice::ShortKey* /*request*/, ::shorturl_voice::Url* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetShortUrl<WithCallbackMethod_GetOriginalUrl<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetShortUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetShortUrl() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetShortUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShortUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::Url* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOriginalUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOriginalUrl() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOriginalUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOriginalUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::ShortKey* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetShortUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetShortUrl() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetShortUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShortUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::Url* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShortUrl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOriginalUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOriginalUrl() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOriginalUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOriginalUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::ShortKey* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOriginalUrl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetShortUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetShortUrl() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetShortUrl(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetShortUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShortUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::Url* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetShortUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOriginalUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOriginalUrl() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOriginalUrl(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOriginalUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOriginalUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::ShortKey* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOriginalUrl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetShortUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetShortUrl() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shorturl_voice::Url, ::shorturl_voice::Url>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shorturl_voice::Url, ::shorturl_voice::Url>* streamer) {
                       return this->StreamedGetShortUrl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetShortUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetShortUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::Url* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetShortUrl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shorturl_voice::Url,::shorturl_voice::Url>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOriginalUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOriginalUrl() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shorturl_voice::ShortKey, ::shorturl_voice::Url>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shorturl_voice::ShortKey, ::shorturl_voice::Url>* streamer) {
                       return this->StreamedGetOriginalUrl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOriginalUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOriginalUrl(::grpc::ServerContext* /*context*/, const ::shorturl_voice::ShortKey* /*request*/, ::shorturl_voice::Url* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOriginalUrl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shorturl_voice::ShortKey,::shorturl_voice::Url>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetShortUrl<WithStreamedUnaryMethod_GetOriginalUrl<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetShortUrl<WithStreamedUnaryMethod_GetOriginalUrl<Service > > StreamedService;
};

}  // namespace shorturl_voice


#endif  // GRPC_shorturl_2eproto__INCLUDED
